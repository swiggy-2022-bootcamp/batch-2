{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "Swiggy Backend API",
    "description": "Online Food Ordering Platform."
  },
  "host": "localhost:3200",
  "basePath": "/",
  "tags": [
    {
      "name": "User",
      "description": "Endpoints"
    },
    {
      "name": "Food",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for user registration.",
        "parameters": [
          {
            "name": "user-details",
            "in": "body",
            "description": "User credentials for user registration.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registration successful.",
            "schema": {
              "$ref": "#/definitions/RegisterSuccessResponse"
            }
          },
          "409": {
            "description": "Registration Forbidden.",
            "schema": {
              "$ref": "#/definitions/Register409PhoneNumberErrorResponse"
            }
          }
        }
      }
    },
    "/authenticate": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for user login.",
        "parameters": [
          {
            "name": "login-details",
            "in": "body",
            "description": "User credentials for user login.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAuthDtls"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful.",
            "schema": {
              "$ref": "#/definitions/LoginSuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Login401ErrorResponse"
            }
          }
        }
      }
    },
    "/usrProfile": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for fetching user profile.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch User Profile successful.",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User Not Found.",
            "schema": {
              "$ref": "#/definitions/FetchUser404ErrorResponse"
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for fetching all users.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Users Found.",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for fetching particular user with id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User Found.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User Not Found.",
            "schema": {
              "$ref": "#/definitions/FetchUser404ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for deleting an user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User delete successful.",
            "schema": {
              "$ref": "#/definitions/UserDeletedSuccessMessage"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User Not Found.",
            "schema": {
              "$ref": "#/definitions/FetchUser404ErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "put": {
        "tags": [
          "User"
        ],
        "description": "Endpoint for updating an user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user-details",
            "in": "body",
            "description": "User details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User update successful.",
            "schema": {
              "$ref": "#/definitions/UpdatedUser"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/food": {
      "get": {
        "tags": [
          "Food"
        ],
        "description": "Endpoint for fetching all foods.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Foods Found.",
            "schema": {
              "$ref": "#/definitions/Foods"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Food"
        ],
        "description": "Endpoint for adding a new food..",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "food",
            "in": "body",
            "description": "Food details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Food"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/Food"
            },
            "description": "Food add successful."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/food/{id}": {
      "get": {
        "tags": [
          "Food"
        ],
        "description": "Endpoint for fetching particular food with food_id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Food ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Food Found.",
            "schema": {
              "$ref": "#/definitions/Food"
            }
          },
          "404": {
            "description": "Food Not Found.",
            "schema": {
              "$ref": "#/definitions/FetchFood404ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Food"
        ],
        "description": "Endpoint for updating a food.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "food",
            "in": "body",
            "description": "Food details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Food"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Food update successful.",
            "schema": {
              "$ref": "#/definitions/UpdatedFood"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Food Not Found.",
            "schema": {
              "$ref": "#/definitions/FetchFood404ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Food"
        ],
        "description": "Endpoint for deleting a food.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Food ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Food delete successful.",
            "schema": {
              "$ref": "#/definitions/FoodDeletedSuccessMessage"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Food Not Found.",
            "schema": {
              "$ref": "#/definitions/FetchFood404ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "username": {
          "type": "string",
          "example": "achilles"
        },
        "email": {
          "type": "string",
          "example": "achilles98@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "nicetry"
        },
        "phone": {
          "type": "number",
          "example": 987654321
        },
        "address": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "house_no": {
              "type": "number",
              "example": 1
            },
            "street": {
              "type": "string",
              "example": "Brooklyn Avenue"
            },
            "city": {
              "type": "string",
              "example": "NY"
            },
            "state": {
              "type": "string",
              "example": "New York"
            },
            "zip": {
              "type": "number",
              "example": 11201
            }
          }
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "achilles"
        },
        "email": {
          "type": "string",
          "example": "achilles98@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "nicetrybro"
        },
        "phone": {
          "type": "number",
          "example": 987654312
        },
        "address": {
          "type": "object",
          "properties": {
            "house_no": {
              "type": "number",
              "example": 1
            },
            "street": {
              "type": "string",
              "example": "First Avenue"
            },
            "city": {
              "type": "string",
              "example": "NY"
            },
            "state": {
              "type": "string",
              "example": "New York"
            },
            "zip": {
              "type": "number",
              "example": 11201
            }
          }
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2
          },
          "username": {
            "type": "string",
            "example": "ron"
          },
          "email": {
            "type": "string",
            "example": "ron@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "anothernicetry"
          },
          "phone": {
            "type": "number",
            "example": 987456321
          },
          "address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "house_no": {
                "type": "number",
                "example": 95
              },
              "street": {
                "type": "string",
                "example": "Second Avenue"
              },
              "city": {
                "type": "string",
                "example": "NY"
              },
              "state": {
                "type": "string",
                "example": "New York"
              },
              "zip": {
                "type": "number",
                "example": 11203
              }
            }
          }
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "true"
        },
        "user": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "example": "achilles"
            },
            "email": {
              "type": "string",
              "example": "achilles98@gmail.com"
            },
            "phone": {
              "type": "number",
              "example": 987654321
            },
            "address": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "house_no": {
                  "type": "number",
                  "example": 1
                },
                "street": {
                  "type": "string",
                  "example": "Brooklyn Avenue"
                },
                "city": {
                  "type": "string",
                  "example": "NY"
                },
                "state": {
                  "type": "string",
                  "example": "New York"
                },
                "zip": {
                  "type": "number",
                  "example": 11201
                }
              }
            }
          }
        }
      }
    },
    "Food": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "food_id": {
          "type": "number",
          "example": 10
        },
        "food_name": {
          "type": "string",
          "example": "Chicken Barbeque Pizza"
        },
        "food_cost": {
          "type": "number",
          "example": 50
        },
        "food_type": {
          "type": "string",
          "example": "Non-Veg Pizza"
        }
      }
    },
    "UpdatedFood": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "food_id": {
          "type": "number",
          "example": 10
        },
        "food_name": {
          "type": "string",
          "example": "Chicken Barbeque Pizza"
        },
        "food_cost": {
          "type": "number",
          "example": 70
        },
        "food_type": {
          "type": "string",
          "example": "Non-Veg Pizza"
        }
      }
    },
    "Foods": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2
          },
          "food_id": {
            "type": "number",
            "example": 11
          },
          "food_name": {
            "type": "string",
            "example": "Chicken Special Pizza"
          },
          "food_cost": {
            "type": "number",
            "example": 60
          },
          "food_type": {
            "type": "string",
            "example": "Non-Veg Pizza"
          }
        }
      }
    },
    "UserAuthDtls": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "achilles"
        },
        "password": {
          "type": "string",
          "example": "nicetry"
        }
      }
    },
    "LoginSuccessResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User logged in successfully!"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWQ4NjFiNzNkN2UwMzYzZDlmNGY0YjkiLCJpYXQiOjE2NDE1NzA3OTMsImV4cCI6MTY0MTU3MTM5M30.NbPF0xEtsYSvYopE9nD5FDMbqmCqoi_ZO4NhLj2yN2E"
        }
      }
    },
    "Login401ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User Name is not registered!"
        }
      }
    },
    "RegisterSuccessResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User Registered Successfully!"
        },
        "user": {
          "type": "undefined"
        }
      }
    },
    "Register409UsernameErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Username already registered!"
        }
      }
    },
    "Register409EmailErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Email already registered!"
        }
      }
    },
    "Register409PhoneNumberErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Phone number already registered!"
        }
      }
    },
    "ChangeUsername409ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Username can't be changed!"
        }
      }
    },
    "FetchUser404ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Sorry, user with id: 10 not found!"
        }
      }
    },
    "UserDeletedSuccessMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User deleted successfully!"
        }
      }
    },
    "FoodDeletedSuccessMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Food deleted successfully!"
        }
      }
    },
    "FetchFood404ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Sorry, Food with Food ID: 10 not found!"
        }
      }
    }
  }
}